from datetime import datetime

import buttons
from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import BufferedInputFile, CallbackQuery, Message
from tools.graphs import progress
from tools.utils import is_today

mainpage = Router()


@mainpage.message(Command('start'))
@mainpage.callback_query(F.data == 'main')
async def start_command(req: Message | CallbackQuery):
    message = req
    if isinstance(req, CallbackQuery):
        if not (message := req.message): return
        await req.answer()
    if (
        isinstance(message, Message)
        and (i := message.from_user)
        and i.is_bot
        and not message.photo
    ): method = message.edit_text
    else: method = message.answer
    slogans = [
        '–ù–æ–≤—ã–π –¥–µ–Ω—å ‚Äî –Ω–æ–≤—ã–µ —Ü–µ–ª–∏, –≥–¥–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤–∞–∂–µ–Ω!',
        '–ö–∞–∂–¥—ã–π —à–∞–≥ –∫ –∑–¥–æ—Ä–æ–≤—å—é ‚Äî —ç—Ç–æ —à–∞–≥ –∫ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ —Å–µ–±—è!',
        '–ë–∞–ª–∞–Ω—Å –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî –≤—Å—ë –≤ —Ç–≤–æ–∏—Ö —Ä—É–∫–∞—Ö!',
        '–ü–ª–∞–Ω–∏—Ä—É–π, —Ç—Ä–µ–Ω–∏—Ä—É–π—Å—è, –≤–µ—Ä—å —Å–µ–±—è ‚Äî –¥–æ—Å—Ç–∏–≥–∞–π —Ü–µ–ª–µ–π!',
    ]
    random = hash(datetime.now()) % len(slogans)
    await method(text=slogans[random], reply_markup=buttons.main)


@mainpage.message(Command('set_profile'))
@mainpage.callback_query(F.data == 'set_profile')
async def set_profile(req: Message | CallbackQuery, state: FSMContext):
    message = req
    if isinstance(req, CallbackQuery):
        if not (message := req.message): return
        await req.answer()
    data = await state.get_data()
    if not data or data.get('calories_goal') is None:
        profile = '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
    else:
        profile = (f"- –í–æ–∑—Ä–∞—Å—Ç: {data['age']}\n"
                   f"- –ì–æ—Ä–æ–¥: {data['city']}\n"
                   f"- –í–µ—Å: {data['weight']} –∫–≥\n"
                   f"- –†–æ—Å—Ç: {data['height']} —Å–º\n"
                   f"- –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {data['activity']}\n"
                   f"- –¶–µ–ª—å –≤–æ–¥—ã: {data['water_goal']} –º–ª\n"
                   f"- –¶–µ–ª—å: {data['calories_goal']} –∫–∫–∞–ª")
    if isinstance(message, Message) and (i := message.from_user) and i.is_bot:
        method = message.edit_text
    else: method = message.answer
    await method(f'‚öôÔ∏è –¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å:\n{profile}', reply_markup=buttons.set_profile)


@mainpage.message(Command('check_progress'))
@mainpage.callback_query(F.data == 'check_progress')
async def check_progress(req: Message | CallbackQuery, state: FSMContext):
    message = req
    if isinstance(req, CallbackQuery):
        if not (message := req.message): return
        await req.answer()
    data = await state.get_data()
    if isinstance(message, Message) and (i := message.from_user) and i.is_bot:
        method = message.edit_text
    else: method = message.answer
    if data.get('calories_goal') is None:
        await method(f'‚öôÔ∏è –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω', reply_markup=buttons.set_profile)
        return

    datenow = datetime.now().strftime(f'%Y-%m-%d')
    logged_water = await is_today(data, 'logged_water')
    logged_calories = await is_today(data, 'logged_calories')
    burned_calories = await is_today(data, 'burned_calories')

    if (wdg := data.get('water_daygoal')) and datenow in wdg:
        data['water_goal'] = wdg[datenow]
    left_water = (wg := data['water_goal']) - logged_water
    wat_asw = f'–û—Å—Ç–∞–ª–æ—Å—å: {left_water} –º–ª' if left_water > 0 else '–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –Ω–æ—Ä–º—É'

    left_calories = logged_calories - burned_calories
    sum_calories = int(data['calories_goal'] + burned_calories * 0.5)
    cal_asw = (f'–ë–∞–ª–∞–Ω—Å: {left_calories}'
               if logged_calories < sum_calories else '–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –Ω–æ—Ä–º—É')

    high_temp = f'ü•µ +500–º–ª –º–ª –∏–∑-–∑–∞ –∂–∞—Ä–∫–æ–π –ø–æ–≥–æ–¥—ã\n' if wdg and datenow in wdg else ''
    progress = (f'{high_temp}'
                f'üíß –í–æ–¥–∞:\n'
                f'- –°–µ–≥–æ–¥–Ω—è –≤—ã–ø–∏—Ç–æ: {logged_water} –º–ª –∏–∑ {wg}\n'
                f'- {wat_asw}\n\n'
                f'üî• –ö–∞–ª–æ—Ä–∏–∏:\n'
                f'- –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {logged_calories} –∫–∫–∞–ª –∏–∑ {sum_calories}\n'
                f'- –°–æ–∂–∂–µ–Ω–æ: {burned_calories}\n'
                f'- {cal_asw}\n')
    await method(progress, reply_markup=buttons.progress)


@mainpage.callback_query(F.data == 'graph')
async def graph(req: CallbackQuery, state: FSMContext):
    if not (msg := req.message): return
    await req.answer()
    if isinstance(msg, Message) and (i := msg.from_user) and i.is_bot:
        method = msg.edit_text
    else: method = msg.answer
    data = await state.get_data()
    if data.get('calories_goal') is None:
        await method(f'‚öôÔ∏è –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω', reply_markup=buttons.set_profile)
        return
    if not (lw := data.get('logged_water')) or not (lc := data.get('logged_calories')):
        text = '–ö–∞–ª–æ—Ä–∏–∏ –∏–ª–∏ –≤–æ–¥–∞ –Ω–µ –±—ã–ª–∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω—ã'
        await method(text, reply_markup=buttons.go_back)
        return
    progress_graph = await progress(lw, lc)
    file = BufferedInputFile(progress_graph, filename='graph.png')
    caption = 'üìä –ì—Ä–∞—Ñ–∏–∫ –≤–∞—à–µ–π –¥–∏–µ—Ç—ã –ø–æ –¥–Ω—è–º'
    await msg.answer_photo(file, caption=caption, reply_markup=buttons.go_back)
